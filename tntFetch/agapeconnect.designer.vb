'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18051
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AgapeConnect")>  _
Partial Public Class agapeconnectDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub InsertAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
  Partial Private Sub UpdateAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
  Partial Private Sub DeleteAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
  Partial Private Sub InsertAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
  Partial Private Sub UpdateAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
  Partial Private Sub DeleteAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
  Partial Private Sub InsertAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
  Partial Private Sub UpdateAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
  Partial Private Sub DeleteAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
  Partial Private Sub InsertAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
  Partial Private Sub UpdateAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
  Partial Private Sub DeleteAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.tntFetch.My.MySettings.Default.AgapeConnectConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AP_StaffBroker_Staffs() As System.Data.Linq.Table(Of AP_StaffBroker_Staff)
		Get
			Return Me.GetTable(Of AP_StaffBroker_Staff)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_StaffProfiles() As System.Data.Linq.Table(Of AP_StaffBroker_StaffProfile)
		Get
			Return Me.GetTable(Of AP_StaffBroker_StaffProfile)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_StaffPropertyDefinitions() As System.Data.Linq.Table(Of AP_StaffBroker_StaffPropertyDefinition)
		Get
			Return Me.GetTable(Of AP_StaffBroker_StaffPropertyDefinition)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpd_Countries() As System.Data.Linq.Table(Of AP_mpd_Country)
		Get
			Return Me.GetTable(Of AP_mpd_Country)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpd_UserAccountInfos() As System.Data.Linq.Table(Of AP_mpd_UserAccountInfo)
		Get
			Return Me.GetTable(Of AP_mpd_UserAccountInfo)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpdCalc_StaffBudgets() As System.Data.Linq.Table(Of AP_mpdCalc_StaffBudget)
		Get
			Return Me.GetTable(Of AP_mpdCalc_StaffBudget)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpdCalc_Definitions() As System.Data.Linq.Table(Of AP_mpdCalc_Definition)
		Get
			Return Me.GetTable(Of AP_mpdCalc_Definition)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_Settings() As System.Data.Linq.Table(Of AP_StaffBroker_Setting)
		Get
			Return Me.GetTable(Of AP_StaffBroker_Setting)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_Staff")>  _
Partial Public Class AP_StaffBroker_Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffId As Integer
	
	Private _DisplayName As String
	
	Private _CostCenter As String
	
	Private _StaffTypeId As System.Nullable(Of Short)
	
	Private _UserId1 As Integer
	
	Private _UserId2 As System.Nullable(Of Integer)
	
	Private _Active As Boolean
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _AP_StaffBroker_StaffProfiles As EntitySet(Of AP_StaffBroker_StaffProfile)
	
	Private _AP_mpd_UserAccountInfos As EntitySet(Of AP_mpd_UserAccountInfo)
	
    Private _AP_mpdCalc_StaffBudgets As EntitySet(Of AP_mpdCalc_StaffBudget)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnCostCenterChanging(value As String)
    End Sub
    Partial Private Sub OnCostCenterChanged()
    End Sub
    Partial Private Sub OnStaffTypeIdChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnStaffTypeIdChanged()
    End Sub
    Partial Private Sub OnUserId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnUserId1Changed()
    End Sub
    Partial Private Sub OnUserId2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserId2Changed()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._AP_StaffBroker_StaffProfiles = New EntitySet(Of AP_StaffBroker_StaffProfile)(AddressOf Me.attach_AP_StaffBroker_StaffProfiles, AddressOf Me.detach_AP_StaffBroker_StaffProfiles)
        Me._AP_mpd_UserAccountInfos = New EntitySet(Of AP_mpd_UserAccountInfo)(AddressOf Me.attach_AP_mpd_UserAccountInfos, AddressOf Me.detach_AP_mpd_UserAccountInfos)
        Me._AP_mpdCalc_StaffBudgets = New EntitySet(Of AP_mpdCalc_StaffBudget)(AddressOf Me.attach_AP_mpdCalc_StaffBudgets, AddressOf Me.detach_AP_mpdCalc_StaffBudgets)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property StaffId() As Integer
        Get
            Return Me._StaffId
        End Get
        Set(value As Integer)
            If ((Me._StaffId = value) _
                        = False) Then
                Me.OnStaffIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffId = value
                Me.SendPropertyChanged("StaffId")
                Me.OnStaffIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=False)> _
    Public Property DisplayName() As String
        Get
            Return Me._DisplayName
        End Get
        Set(value As String)
            If (String.Equals(Me._DisplayName, value) = False) Then
                Me.OnDisplayNameChanging(value)
                Me.SendPropertyChanging()
                Me._DisplayName = value
                Me.SendPropertyChanged("DisplayName")
                Me.OnDisplayNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCenter", DbType:="NVarChar(20)")> _
    Public Property CostCenter() As String
        Get
            Return Me._CostCenter
        End Get
        Set(value As String)
            If (String.Equals(Me._CostCenter, value) = False) Then
                Me.OnCostCenterChanging(value)
                Me.SendPropertyChanging()
                Me._CostCenter = value
                Me.SendPropertyChanged("CostCenter")
                Me.OnCostCenterChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffTypeId", DbType:="SmallInt")> _
    Public Property StaffTypeId() As System.Nullable(Of Short)
        Get
            Return Me._StaffTypeId
        End Get
        Set(value As System.Nullable(Of Short))
            If (Me._StaffTypeId.Equals(value) = False) Then
                Me.OnStaffTypeIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffTypeId = value
                Me.SendPropertyChanged("StaffTypeId")
                Me.OnStaffTypeIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId1", DbType:="Int NOT NULL")> _
    Public Property UserId1() As Integer
        Get
            Return Me._UserId1
        End Get
        Set(value As Integer)
            If ((Me._UserId1 = value) _
                        = False) Then
                Me.OnUserId1Changing(value)
                Me.SendPropertyChanging()
                Me._UserId1 = value
                Me.SendPropertyChanged("UserId1")
                Me.OnUserId1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId2", DbType:="Int")> _
    Public Property UserId2() As System.Nullable(Of Integer)
        Get
            Return Me._UserId2
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._UserId2.Equals(value) = False) Then
                Me.OnUserId2Changing(value)
                Me.SendPropertyChanging()
                Me._UserId2 = value
                Me.SendPropertyChanged("UserId2")
                Me.OnUserId2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")> _
    Public Property Active() As Boolean
        Get
            Return Me._Active
        End Get
        Set(value As Boolean)
            If ((Me._Active = value) _
                        = False) Then
                Me.OnActiveChanging(value)
                Me.SendPropertyChanging()
                Me._Active = value
                Me.SendPropertyChanged("Active")
                Me.OnActiveChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")> _
    Public Property PortalId() As System.Nullable(Of Integer)
        Get
            Return Me._PortalId
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._PortalId.Equals(value) = False) Then
                Me.OnPortalIdChanging(value)
                Me.SendPropertyChanging()
                Me._PortalId = value
                Me.SendPropertyChanged("PortalId")
                Me.OnPortalIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffProfiles", ThisKey:="StaffId", OtherKey:="StaffId")> _
    Public Property AP_StaffBroker_StaffProfiles() As EntitySet(Of AP_StaffBroker_StaffProfile)
        Get
            Return Me._AP_StaffBroker_StaffProfiles
        End Get
        Set(value As EntitySet(Of AP_StaffBroker_StaffProfile))
            Me._AP_StaffBroker_StaffProfiles.Assign(value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_mpd_UserAccountInfo", Storage:="_AP_mpd_UserAccountInfos", ThisKey:="StaffId", OtherKey:="staffId")> _
    Public Property AP_mpd_UserAccountInfos() As EntitySet(Of AP_mpd_UserAccountInfo)
        Get
            Return Me._AP_mpd_UserAccountInfos
        End Get
        Set(value As EntitySet(Of AP_mpd_UserAccountInfo))
            Me._AP_mpd_UserAccountInfos.Assign(value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_mpdCalc_StaffBudget", Storage:="_AP_mpdCalc_StaffBudgets", ThisKey:="StaffId", OtherKey:="StaffId")> _
    Public Property AP_mpdCalc_StaffBudgets() As EntitySet(Of AP_mpdCalc_StaffBudget)
        Get
            Return Me._AP_mpdCalc_StaffBudgets
        End Get
        Set(value As EntitySet(Of AP_mpdCalc_StaffBudget))
            Me._AP_mpdCalc_StaffBudgets.Assign(value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_Staff = Me
    End Sub

    Private Sub detach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_Staff = Nothing
    End Sub

    Private Sub attach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_Staff = Me
    End Sub

    Private Sub detach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_Staff = Nothing
    End Sub

    Private Sub attach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_Staff = Me
    End Sub

    Private Sub detach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_Staff = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_StaffProfile")> _
Partial Public Class AP_StaffBroker_StaffProfile
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _StaffProfileId As Long

    Private _PropertyValue As String

    Private _StaffPropertyDefinitionId As Integer

    Private _StaffId As Integer

    Private _AP_StaffBroker_Staff As EntityRef(Of AP_StaffBroker_Staff)

    Private _AP_StaffBroker_StaffPropertyDefinition As EntityRef(Of AP_StaffBroker_StaffPropertyDefinition)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffProfileIdChanging(value As Long)
    End Sub
    Partial Private Sub OnStaffProfileIdChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._AP_StaffBroker_Staff = CType(Nothing, EntityRef(Of AP_StaffBroker_Staff))
        Me._AP_StaffBroker_StaffPropertyDefinition = CType(Nothing, EntityRef(Of AP_StaffBroker_StaffPropertyDefinition))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffProfileId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property StaffProfileId() As Long
        Get
            Return Me._StaffProfileId
        End Get
        Set(value As Long)
            If ((Me._StaffProfileId = value) _
                        = False) Then
                Me.OnStaffProfileIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffProfileId = value
                Me.SendPropertyChanged("StaffProfileId")
                Me.OnStaffProfileIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="VarChar(MAX)")> _
    Public Property PropertyValue() As String
        Get
            Return Me._PropertyValue
        End Get
        Set(value As String)
            If (String.Equals(Me._PropertyValue, value) = False) Then
                Me.OnPropertyValueChanging(value)
                Me.SendPropertyChanging()
                Me._PropertyValue = value
                Me.SendPropertyChanged("PropertyValue")
                Me.OnPropertyValueChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPropertyDefinitionId", DbType:="Int NOT NULL")> _
    Public Property StaffPropertyDefinitionId() As Integer
        Get
            Return Me._StaffPropertyDefinitionId
        End Get
        Set(value As Integer)
            If ((Me._StaffPropertyDefinitionId = value) _
                        = False) Then
                If Me._AP_StaffBroker_StaffPropertyDefinition.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnStaffPropertyDefinitionIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffPropertyDefinitionId = value
                Me.SendPropertyChanged("StaffPropertyDefinitionId")
                Me.OnStaffPropertyDefinitionIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int NOT NULL")> _
    Public Property StaffId() As Integer
        Get
            Return Me._StaffId
        End Get
        Set(value As Integer)
            If ((Me._StaffId = value) _
                        = False) Then
                If Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnStaffIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffId = value
                Me.SendPropertyChanged("StaffId")
                Me.OnStaffIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_Staff", ThisKey:="StaffId", OtherKey:="StaffId", IsForeignKey:=True)> _
    Public Property AP_StaffBroker_Staff() As AP_StaffBroker_Staff
        Get
            Return Me._AP_StaffBroker_Staff.Entity
        End Get
        Set(value As AP_StaffBroker_Staff)
            Dim previousValue As AP_StaffBroker_Staff = Me._AP_StaffBroker_Staff.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._AP_StaffBroker_Staff.Entity = Nothing
                    previousValue.AP_StaffBroker_StaffProfiles.Remove(Me)
                End If
                Me._AP_StaffBroker_Staff.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.AP_StaffBroker_StaffProfiles.Add(Me)
                    Me._StaffId = value.StaffId
                Else
                    Me._StaffId = CType(Nothing, Integer)
                End If
                Me.SendPropertyChanged("AP_StaffBroker_Staff")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffPropertyDefinition_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffPropertyDefinition", ThisKey:="StaffPropertyDefinitionId", OtherKey:="StaffPropertyDefinitionId", IsForeignKey:=True)> _
    Public Property AP_StaffBroker_StaffPropertyDefinition() As AP_StaffBroker_StaffPropertyDefinition
        Get
            Return Me._AP_StaffBroker_StaffPropertyDefinition.Entity
        End Get
        Set(value As AP_StaffBroker_StaffPropertyDefinition)
            Dim previousValue As AP_StaffBroker_StaffPropertyDefinition = Me._AP_StaffBroker_StaffPropertyDefinition.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._AP_StaffBroker_StaffPropertyDefinition.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._AP_StaffBroker_StaffPropertyDefinition.Entity = Nothing
                    previousValue.AP_StaffBroker_StaffProfiles.Remove(Me)
                End If
                Me._AP_StaffBroker_StaffPropertyDefinition.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.AP_StaffBroker_StaffProfiles.Add(Me)
                    Me._StaffPropertyDefinitionId = value.StaffPropertyDefinitionId
                Else
                    Me._StaffPropertyDefinitionId = CType(Nothing, Integer)
                End If
                Me.SendPropertyChanged("AP_StaffBroker_StaffPropertyDefinition")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_StaffPropertyDefinition")> _
Partial Public Class AP_StaffBroker_StaffPropertyDefinition
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _StaffPropertyDefinitionId As Integer

    Private _PropertyName As String

    Private _PortalId As System.Nullable(Of Integer)

    Private _ViewOrder As System.Nullable(Of Short)

    Private _Display As System.Nullable(Of Boolean)

    Private _PropertyHelp As String

    Private _Type As System.Nullable(Of Byte)

    Private _FixedFieldName As String

    Private _AP_StaffBroker_StaffProfiles As EntitySet(Of AP_StaffBroker_StaffProfile)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnViewOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnViewOrderChanged()
    End Sub
    Partial Private Sub OnDisplayChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDisplayChanged()
    End Sub
    Partial Private Sub OnPropertyHelpChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyHelpChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnFixedFieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnFixedFieldNameChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._AP_StaffBroker_StaffProfiles = New EntitySet(Of AP_StaffBroker_StaffProfile)(AddressOf Me.attach_AP_StaffBroker_StaffProfiles, AddressOf Me.detach_AP_StaffBroker_StaffProfiles)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPropertyDefinitionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property StaffPropertyDefinitionId() As Integer
        Get
            Return Me._StaffPropertyDefinitionId
        End Get
        Set(value As Integer)
            If ((Me._StaffPropertyDefinitionId = value) _
                        = False) Then
                Me.OnStaffPropertyDefinitionIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffPropertyDefinitionId = value
                Me.SendPropertyChanged("StaffPropertyDefinitionId")
                Me.OnStaffPropertyDefinitionIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=False)> _
    Public Property PropertyName() As String
        Get
            Return Me._PropertyName
        End Get
        Set(value As String)
            If (String.Equals(Me._PropertyName, value) = False) Then
                Me.OnPropertyNameChanging(value)
                Me.SendPropertyChanging()
                Me._PropertyName = value
                Me.SendPropertyChanged("PropertyName")
                Me.OnPropertyNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")> _
    Public Property PortalId() As System.Nullable(Of Integer)
        Get
            Return Me._PortalId
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._PortalId.Equals(value) = False) Then
                Me.OnPortalIdChanging(value)
                Me.SendPropertyChanging()
                Me._PortalId = value
                Me.SendPropertyChanged("PortalId")
                Me.OnPortalIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewOrder", DbType:="SmallInt")> _
    Public Property ViewOrder() As System.Nullable(Of Short)
        Get
            Return Me._ViewOrder
        End Get
        Set(value As System.Nullable(Of Short))
            If (Me._ViewOrder.Equals(value) = False) Then
                Me.OnViewOrderChanging(value)
                Me.SendPropertyChanging()
                Me._ViewOrder = value
                Me.SendPropertyChanged("ViewOrder")
                Me.OnViewOrderChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Display", DbType:="Bit")> _
    Public Property Display() As System.Nullable(Of Boolean)
        Get
            Return Me._Display
        End Get
        Set(value As System.Nullable(Of Boolean))
            If (Me._Display.Equals(value) = False) Then
                Me.OnDisplayChanging(value)
                Me.SendPropertyChanging()
                Me._Display = value
                Me.SendPropertyChanged("Display")
                Me.OnDisplayChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyHelp", DbType:="VarChar(MAX)")> _
    Public Property PropertyHelp() As String
        Get
            Return Me._PropertyHelp
        End Get
        Set(value As String)
            If (String.Equals(Me._PropertyHelp, value) = False) Then
                Me.OnPropertyHelpChanging(value)
                Me.SendPropertyChanging()
                Me._PropertyHelp = value
                Me.SendPropertyChanged("PropertyHelp")
                Me.OnPropertyHelpChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="TinyInt")> _
    Public Property Type() As System.Nullable(Of Byte)
        Get
            Return Me._Type
        End Get
        Set(value As System.Nullable(Of Byte))
            If (Me._Type.Equals(value) = False) Then
                Me.OnTypeChanging(value)
                Me.SendPropertyChanging()
                Me._Type = value
                Me.SendPropertyChanged("Type")
                Me.OnTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FixedFieldName", DbType:="NVarChar(100)")> _
    Public Property FixedFieldName() As String
        Get
            Return Me._FixedFieldName
        End Get
        Set(value As String)
            If (String.Equals(Me._FixedFieldName, value) = False) Then
                Me.OnFixedFieldNameChanging(value)
                Me.SendPropertyChanging()
                Me._FixedFieldName = value
                Me.SendPropertyChanged("FixedFieldName")
                Me.OnFixedFieldNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffPropertyDefinition_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffProfiles", ThisKey:="StaffPropertyDefinitionId", OtherKey:="StaffPropertyDefinitionId")> _
    Public Property AP_StaffBroker_StaffProfiles() As EntitySet(Of AP_StaffBroker_StaffProfile)
        Get
            Return Me._AP_StaffBroker_StaffProfiles
        End Get
        Set(value As EntitySet(Of AP_StaffBroker_StaffProfile))
            Me._AP_StaffBroker_StaffProfiles.Assign(value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_StaffPropertyDefinition = Me
    End Sub

    Private Sub detach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
        Me.SendPropertyChanging()
        entity.AP_StaffBroker_StaffPropertyDefinition = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpd_Country")> _
Partial Public Class AP_mpd_Country
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _mpdCountryId As Integer

    Private _isoCode As String

    Private _name As String

    Private _portalId As Integer

    Private _lastUpdated As System.Nullable(Of Date)

    Private _compensationAccounts As String

    Private _foreighIncomeAccounts As String

    Private _mpdDefId As Integer

    Private _AP_mpd_UserAccountInfos As EntitySet(Of AP_mpd_UserAccountInfo)

    Private _AP_StaffBroker_Settings As EntitySet(Of AP_StaffBroker_Setting)

    Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnisoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnisoCodeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnportalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnportalIdChanged()
    End Sub
    Partial Private Sub OnlastUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastUpdatedChanged()
    End Sub
    Partial Private Sub OncompensationAccountsChanging(value As String)
    End Sub
    Partial Private Sub OncompensationAccountsChanged()
    End Sub
    Partial Private Sub OnforeighIncomeAccountsChanging(value As String)
    End Sub
    Partial Private Sub OnforeighIncomeAccountsChanged()
    End Sub
    Partial Private Sub OnmpdDefIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdDefIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._AP_mpd_UserAccountInfos = New EntitySet(Of AP_mpd_UserAccountInfo)(AddressOf Me.attach_AP_mpd_UserAccountInfos, AddressOf Me.detach_AP_mpd_UserAccountInfos)
        Me._AP_StaffBroker_Settings = New EntitySet(Of AP_StaffBroker_Setting)(AddressOf Me.attach_AP_StaffBroker_Settings, AddressOf Me.detach_AP_StaffBroker_Settings)
        Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property mpdCountryId() As Integer
        Get
            Return Me._mpdCountryId
        End Get
        Set(value As Integer)
            If ((Me._mpdCountryId = value) _
                        = False) Then
                Me.OnmpdCountryIdChanging(value)
                Me.SendPropertyChanging()
                Me._mpdCountryId = value
                Me.SendPropertyChanged("mpdCountryId")
                Me.OnmpdCountryIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isoCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property isoCode() As String
        Get
            Return Me._isoCode
        End Get
        Set(value As String)
            If (String.Equals(Me._isoCode, value) = False) Then
                Me.OnisoCodeChanging(value)
                Me.SendPropertyChanging()
                Me._isoCode = value
                Me.SendPropertyChanged("isoCode")
                Me.OnisoCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
    Public Property name() As String
        Get
            Return Me._name
        End Get
        Set(value As String)
            If (String.Equals(Me._name, value) = False) Then
                Me.OnnameChanging(value)
                Me.SendPropertyChanging()
                Me._name = value
                Me.SendPropertyChanged("name")
                Me.OnnameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_portalId", DbType:="Int NOT NULL")> _
    Public Property portalId() As Integer
        Get
            Return Me._portalId
        End Get
        Set(value As Integer)
            If ((Me._portalId = value) _
                        = False) Then
                Me.OnportalIdChanging(value)
                Me.SendPropertyChanging()
                Me._portalId = value
                Me.SendPropertyChanged("portalId")
                Me.OnportalIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastUpdated", DbType:="SmallDateTime")> _
    Public Property lastUpdated() As System.Nullable(Of Date)
        Get
            Return Me._lastUpdated
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._lastUpdated.Equals(value) = False) Then
                Me.OnlastUpdatedChanging(value)
                Me.SendPropertyChanging()
                Me._lastUpdated = value
                Me.SendPropertyChanged("lastUpdated")
                Me.OnlastUpdatedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compensationAccounts", DbType:="NVarChar(50)")> _
    Public Property compensationAccounts() As String
        Get
            Return Me._compensationAccounts
        End Get
        Set(value As String)
            If (String.Equals(Me._compensationAccounts, value) = False) Then
                Me.OncompensationAccountsChanging(value)
                Me.SendPropertyChanging()
                Me._compensationAccounts = value
                Me.SendPropertyChanged("compensationAccounts")
                Me.OncompensationAccountsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foreighIncomeAccounts", DbType:="NVarChar(50)")> _
    Public Property foreighIncomeAccounts() As String
        Get
            Return Me._foreighIncomeAccounts
        End Get
        Set(value As String)
            If (String.Equals(Me._foreighIncomeAccounts, value) = False) Then
                Me.OnforeighIncomeAccountsChanging(value)
                Me.SendPropertyChanging()
                Me._foreighIncomeAccounts = value
                Me.SendPropertyChanged("foreighIncomeAccounts")
                Me.OnforeighIncomeAccountsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdDefId", DbType:="Int NOT NULL")> _
    Public Property mpdDefId() As Integer
        Get
            Return Me._mpdDefId
        End Get
        Set(value As Integer)
            If ((Me._mpdDefId = value) _
                        = False) Then
                If Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnmpdDefIdChanging(value)
                Me.SendPropertyChanging()
                Me._mpdDefId = value
                Me.SendPropertyChanged("mpdDefId")
                Me.OnmpdDefIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_AP_mpd_UserAccountInfo", Storage:="_AP_mpd_UserAccountInfos", ThisKey:="mpdCountryId", OtherKey:="mpdCountryId")> _
    Public Property AP_mpd_UserAccountInfos() As EntitySet(Of AP_mpd_UserAccountInfo)
        Get
            Return Me._AP_mpd_UserAccountInfos
        End Get
        Set(value As EntitySet(Of AP_mpd_UserAccountInfo))
            Me._AP_mpd_UserAccountInfos.Assign(value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_AP_StaffBroker_Setting", Storage:="_AP_StaffBroker_Settings", ThisKey:="portalId", OtherKey:="PortalId")> _
    Public Property AP_StaffBroker_Settings() As EntitySet(Of AP_StaffBroker_Setting)
        Get
            Return Me._AP_StaffBroker_Settings
        End Get
        Set(value As EntitySet(Of AP_StaffBroker_Setting))
            Me._AP_StaffBroker_Settings.Assign(value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpd_Country", Storage:="_AP_mpdCalc_Definition", ThisKey:="mpdDefId", OtherKey:="mpdDefId", IsForeignKey:=True)> _
    Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
        Get
            Return Me._AP_mpdCalc_Definition.Entity
        End Get
        Set(value As AP_mpdCalc_Definition)
            Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._AP_mpdCalc_Definition.Entity = Nothing
                    previousValue.AP_mpd_Countries = Nothing
                End If
                Me._AP_mpdCalc_Definition.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.AP_mpd_Countries = Me
                    Me._mpdDefId = value.mpdDefId
                Else
                    Me._mpdDefId = CType(Nothing, Integer)
                End If
                Me.SendPropertyChanged("AP_mpdCalc_Definition")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
        Me.SendPropertyChanging()
        entity.AP_mpd_Country = Me
    End Sub

    Private Sub detach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
        Me.SendPropertyChanging()
        entity.AP_mpd_Country = Nothing
    End Sub

    Private Sub attach_AP_StaffBroker_Settings(ByVal entity As AP_StaffBroker_Setting)
        Me.SendPropertyChanging()
        entity.AP_mpd_Country = Me
    End Sub

    Private Sub detach_AP_StaffBroker_Settings(ByVal entity As AP_StaffBroker_Setting)
        Me.SendPropertyChanging()
        entity.AP_mpd_Country = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpd_UserAccountInfo")> _
Partial Public Class AP_mpd_UserAccountInfo
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _mpdUserAccountInfo As Long

    Private _mpdCountryId As Integer

    Private _staffId As Integer

    Private _period As String

    Private _income As Decimal

    Private _expense As Decimal

    Private _balance As Decimal

    Private _foreignIncome As Decimal

    Private _compensation As Decimal

    Private _AP_StaffBroker_Staff As EntityRef(Of AP_StaffBroker_Staff)

    Private _AP_mpd_Country As EntityRef(Of AP_mpd_Country)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdUserAccountInfoChanging(value As Long)
    End Sub
    Partial Private Sub OnmpdUserAccountInfoChanged()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnstaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffIdChanged()
    End Sub
    Partial Private Sub OnperiodChanging(value As String)
    End Sub
    Partial Private Sub OnperiodChanged()
    End Sub
    Partial Private Sub OnincomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnincomeChanged()
    End Sub
    Partial Private Sub OnexpenseChanging(value As Decimal)
    End Sub
    Partial Private Sub OnexpenseChanged()
    End Sub
    Partial Private Sub OnbalanceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnbalanceChanged()
    End Sub
    Partial Private Sub OnforeignIncomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnforeignIncomeChanged()
    End Sub
    Partial Private Sub OncompensationChanging(value As Decimal)
    End Sub
    Partial Private Sub OncompensationChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._AP_StaffBroker_Staff = CType(Nothing, EntityRef(Of AP_StaffBroker_Staff))
        Me._AP_mpd_Country = CType(Nothing, EntityRef(Of AP_mpd_Country))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdUserAccountInfo", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property mpdUserAccountInfo() As Long
        Get
            Return Me._mpdUserAccountInfo
        End Get
        Set(value As Long)
            If ((Me._mpdUserAccountInfo = value) _
                        = False) Then
                Me.OnmpdUserAccountInfoChanging(value)
                Me.SendPropertyChanging()
                Me._mpdUserAccountInfo = value
                Me.SendPropertyChanged("mpdUserAccountInfo")
                Me.OnmpdUserAccountInfoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", DbType:="Int NOT NULL")> _
    Public Property mpdCountryId() As Integer
        Get
            Return Me._mpdCountryId
        End Get
        Set(value As Integer)
            If ((Me._mpdCountryId = value) _
                        = False) Then
                If Me._AP_mpd_Country.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnmpdCountryIdChanging(value)
                Me.SendPropertyChanging()
                Me._mpdCountryId = value
                Me.SendPropertyChanged("mpdCountryId")
                Me.OnmpdCountryIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffId", DbType:="Int NOT NULL")> _
    Public Property staffId() As Integer
        Get
            Return Me._staffId
        End Get
        Set(value As Integer)
            If ((Me._staffId = value) _
                        = False) Then
                If Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnstaffIdChanging(value)
                Me.SendPropertyChanging()
                Me._staffId = value
                Me.SendPropertyChanged("staffId")
                Me.OnstaffIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_period", DbType:="Char(6) NOT NULL", CanBeNull:=False)> _
    Public Property period() As String
        Get
            Return Me._period
        End Get
        Set(value As String)
            If (String.Equals(Me._period, value) = False) Then
                Me.OnperiodChanging(value)
                Me.SendPropertyChanging()
                Me._period = value
                Me.SendPropertyChanged("period")
                Me.OnperiodChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income", DbType:="Money NOT NULL")> _
    Public Property income() As Decimal
        Get
            Return Me._income
        End Get
        Set(value As Decimal)
            If ((Me._income = value) _
                        = False) Then
                Me.OnincomeChanging(value)
                Me.SendPropertyChanging()
                Me._income = value
                Me.SendPropertyChanged("income")
                Me.OnincomeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expense", DbType:="Money NOT NULL")> _
    Public Property expense() As Decimal
        Get
            Return Me._expense
        End Get
        Set(value As Decimal)
            If ((Me._expense = value) _
                        = False) Then
                Me.OnexpenseChanging(value)
                Me.SendPropertyChanging()
                Me._expense = value
                Me.SendPropertyChanged("expense")
                Me.OnexpenseChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_balance", DbType:="Money NOT NULL")> _
    Public Property balance() As Decimal
        Get
            Return Me._balance
        End Get
        Set(value As Decimal)
            If ((Me._balance = value) _
                        = False) Then
                Me.OnbalanceChanging(value)
                Me.SendPropertyChanging()
                Me._balance = value
                Me.SendPropertyChanged("balance")
                Me.OnbalanceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foreignIncome", DbType:="Money NOT NULL")> _
    Public Property foreignIncome() As Decimal
        Get
            Return Me._foreignIncome
        End Get
        Set(value As Decimal)
            If ((Me._foreignIncome = value) _
                        = False) Then
                Me.OnforeignIncomeChanging(value)
                Me.SendPropertyChanging()
                Me._foreignIncome = value
                Me.SendPropertyChanged("foreignIncome")
                Me.OnforeignIncomeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compensation", DbType:="Money NOT NULL")> _
    Public Property compensation() As Decimal
        Get
            Return Me._compensation
        End Get
        Set(value As Decimal)
            If ((Me._compensation = value) _
                        = False) Then
                Me.OncompensationChanging(value)
                Me.SendPropertyChanging()
                Me._compensation = value
                Me.SendPropertyChanged("compensation")
                Me.OncompensationChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_mpd_UserAccountInfo", Storage:="_AP_StaffBroker_Staff", ThisKey:="staffId", OtherKey:="StaffId", IsForeignKey:=True)> _
    Public Property AP_StaffBroker_Staff() As AP_StaffBroker_Staff
        Get
            Return Me._AP_StaffBroker_Staff.Entity
        End Get
        Set(value As AP_StaffBroker_Staff)
            Dim previousValue As AP_StaffBroker_Staff = Me._AP_StaffBroker_Staff.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._AP_StaffBroker_Staff.Entity = Nothing
                    previousValue.AP_mpd_UserAccountInfos.Remove(Me)
                End If
                Me._AP_StaffBroker_Staff.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.AP_mpd_UserAccountInfos.Add(Me)
                    Me._staffId = value.StaffId
                Else
                    Me._staffId = CType(Nothing, Integer)
                End If
                Me.SendPropertyChanged("AP_StaffBroker_Staff")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_AP_mpd_UserAccountInfo", Storage:="_AP_mpd_Country", ThisKey:="mpdCountryId", OtherKey:="mpdCountryId", IsForeignKey:=True)> _
    Public Property AP_mpd_Country() As AP_mpd_Country
        Get
            Return Me._AP_mpd_Country.Entity
        End Get
        Set(value As AP_mpd_Country)
            Dim previousValue As AP_mpd_Country = Me._AP_mpd_Country.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._AP_mpd_Country.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._AP_mpd_Country.Entity = Nothing
                    previousValue.AP_mpd_UserAccountInfos.Remove(Me)
                End If
                Me._AP_mpd_Country.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.AP_mpd_UserAccountInfos.Add(Me)
                    Me._mpdCountryId = value.mpdCountryId
                Else
                    Me._mpdCountryId = CType(Nothing, Integer)
                End If
                Me.SendPropertyChanged("AP_mpd_Country")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_StaffBudget")> _
Partial Public Class AP_mpdCalc_StaffBudget
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _StaffBudgetId As Integer

    Private _StaffId As Integer

    Private _DefinitionId As Integer

    Private _BudgetYearStart As Short

    Private _SubmittedOn As System.Nullable(Of Date)

    Private _ApprovedBy As System.Nullable(Of Integer)

    Private _ApprovedOn As System.Nullable(Of Date)

    Private _ProcessedBy As System.Nullable(Of Integer)

    Private _ProcessedOn As System.Nullable(Of Date)

    Private _Status As Short

    Private _CurrentSupportLevel As System.Nullable(Of Decimal)

    Private _TotalBudget As System.Nullable(Of Decimal)

    Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)

    Private _AP_StaffBroker_Staff As EntityRef(Of AP_StaffBroker_Staff)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffBudgetIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffBudgetIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDefinitionIdChanged()
    End Sub
    Partial Private Sub OnBudgetYearStartChanging(value As Short)
    End Sub
    Partial Private Sub OnBudgetYearStartChanged()
    End Sub
    Partial Private Sub OnSubmittedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSubmittedOnChanged()
    End Sub
    Partial Private Sub OnApprovedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovedByChanged()
    End Sub
    Partial Private Sub OnApprovedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApprovedOnChanged()
    End Sub
    Partial Private Sub OnProcessedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProcessedByChanged()
    End Sub
    Partial Private Sub OnProcessedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnProcessedOnChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Short)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnCurrentSupportLevelChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCurrentSupportLevelChanged()
    End Sub
    Partial Private Sub OnTotalBudgetChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalBudgetChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
        Me._AP_StaffBroker_Staff = CType(Nothing, EntityRef(Of AP_StaffBroker_Staff))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffBudgetId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property StaffBudgetId() As Integer
        Get
            Return Me._StaffBudgetId
        End Get
        Set(value As Integer)
            If ((Me._StaffBudgetId = value) _
                        = False) Then
                Me.OnStaffBudgetIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffBudgetId = value
                Me.SendPropertyChanged("StaffBudgetId")
                Me.OnStaffBudgetIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int NOT NULL")> _
    Public Property StaffId() As Integer
        Get
            Return Me._StaffId
        End Get
        Set(value As Integer)
            If ((Me._StaffId = value) _
                        = False) Then
                If Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnStaffIdChanging(value)
                Me.SendPropertyChanging()
                Me._StaffId = value
                Me.SendPropertyChanged("StaffId")
                Me.OnStaffIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefinitionId", DbType:="Int NOT NULL")> _
    Public Property DefinitionId() As Integer
        Get
            Return Me._DefinitionId
        End Get
        Set(value As Integer)
            If ((Me._DefinitionId = value) _
                        = False) Then
                If Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnDefinitionIdChanging(value)
                Me.SendPropertyChanging()
                Me._DefinitionId = value
                Me.SendPropertyChanged("DefinitionId")
                Me.OnDefinitionIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BudgetYearStart", DbType:="SmallInt NOT NULL")> _
    Public Property BudgetYearStart() As Short
        Get
            Return Me._BudgetYearStart
        End Get
        Set(value As Short)
            If ((Me._BudgetYearStart = value) _
                        = False) Then
                Me.OnBudgetYearStartChanging(value)
                Me.SendPropertyChanging()
                Me._BudgetYearStart = value
                Me.SendPropertyChanged("BudgetYearStart")
                Me.OnBudgetYearStartChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubmittedOn", DbType:="DateTime")> _
    Public Property SubmittedOn() As System.Nullable(Of Date)
        Get
            Return Me._SubmittedOn
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._SubmittedOn.Equals(value) = False) Then
                Me.OnSubmittedOnChanging(value)
                Me.SendPropertyChanging()
                Me._SubmittedOn = value
                Me.SendPropertyChanged("SubmittedOn")
                Me.OnSubmittedOnChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedBy", DbType:="Int")> _
    Public Property ApprovedBy() As System.Nullable(Of Integer)
        Get
            Return Me._ApprovedBy
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._ApprovedBy.Equals(value) = False) Then
                Me.OnApprovedByChanging(value)
                Me.SendPropertyChanging()
                Me._ApprovedBy = value
                Me.SendPropertyChanged("ApprovedBy")
                Me.OnApprovedByChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedOn", DbType:="DateTime")> _
    Public Property ApprovedOn() As System.Nullable(Of Date)
        Get
            Return Me._ApprovedOn
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._ApprovedOn.Equals(value) = False) Then
                Me.OnApprovedOnChanging(value)
                Me.SendPropertyChanging()
                Me._ApprovedOn = value
                Me.SendPropertyChanged("ApprovedOn")
                Me.OnApprovedOnChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessedBy", DbType:="Int")> _
    Public Property ProcessedBy() As System.Nullable(Of Integer)
        Get
            Return Me._ProcessedBy
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._ProcessedBy.Equals(value) = False) Then
                Me.OnProcessedByChanging(value)
                Me.SendPropertyChanging()
                Me._ProcessedBy = value
                Me.SendPropertyChanged("ProcessedBy")
                Me.OnProcessedByChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessedOn", DbType:="DateTime")> _
    Public Property ProcessedOn() As System.Nullable(Of Date)
        Get
            Return Me._ProcessedOn
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._ProcessedOn.Equals(value) = False) Then
                Me.OnProcessedOnChanging(value)
                Me.SendPropertyChanging()
                Me._ProcessedOn = value
                Me.SendPropertyChanged("ProcessedOn")
                Me.OnProcessedOnChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="SmallInt NOT NULL")> _
    Public Property Status() As Short
        Get
            Return Me._Status
        End Get
        Set(value As Short)
            If ((Me._Status = value) _
                        = False) Then
                Me.OnStatusChanging(value)
                Me.SendPropertyChanging()
                Me._Status = value
                Me.SendPropertyChanged("Status")
                Me.OnStatusChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentSupportLevel", DbType:="Money")> _
    Public Property CurrentSupportLevel() As System.Nullable(Of Decimal)
        Get
            Return Me._CurrentSupportLevel
        End Get
        Set(value As System.Nullable(Of Decimal))
            If (Me._CurrentSupportLevel.Equals(value) = False) Then
                Me.OnCurrentSupportLevelChanging(value)
                Me.SendPropertyChanging()
                Me._CurrentSupportLevel = value
                Me.SendPropertyChanged("CurrentSupportLevel")
                Me.OnCurrentSupportLevelChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBudget", DbType:="Money")> _
    Public Property TotalBudget() As System.Nullable(Of Decimal)
        Get
            Return Me._TotalBudget
        End Get
        Set(value As System.Nullable(Of Decimal))
            If (Me._TotalBudget.Equals(value) = False) Then
                Me.OnTotalBudgetChanging(value)
                Me.SendPropertyChanging()
                Me._TotalBudget = value
                Me.SendPropertyChanged("TotalBudget")
                Me.OnTotalBudgetChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_StaffBudget", Storage:="_AP_mpdCalc_Definition", ThisKey:="DefinitionId", OtherKey:="mpdDefId", IsForeignKey:=True)> _
    Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
        Get
            Return Me._AP_mpdCalc_Definition.Entity
        End Get
        Set(value As AP_mpdCalc_Definition)
            Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._AP_mpdCalc_Definition.Entity = Nothing
                    previousValue.AP_mpdCalc_StaffBudgets.Remove(Me)
                End If
                Me._AP_mpdCalc_Definition.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.AP_mpdCalc_StaffBudgets.Add(Me)
                    Me._DefinitionId = value.mpdDefId
                Else
                    Me._DefinitionId = CType(Nothing, Integer)
                End If
                Me.SendPropertyChanged("AP_mpdCalc_Definition")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_mpdCalc_StaffBudget", Storage:="_AP_StaffBroker_Staff", ThisKey:="StaffId", OtherKey:="StaffId", IsForeignKey:=True)> _
    Public Property AP_StaffBroker_Staff() As AP_StaffBroker_Staff
        Get
            Return Me._AP_StaffBroker_Staff.Entity
        End Get
        Set(value As AP_StaffBroker_Staff)
            Dim previousValue As AP_StaffBroker_Staff = Me._AP_StaffBroker_Staff.Entity
            If ((Object.Equals(previousValue, value) = False) _
                        OrElse (Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()
                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._AP_StaffBroker_Staff.Entity = Nothing
                    previousValue.AP_mpdCalc_StaffBudgets.Remove(Me)
                End If
                Me._AP_StaffBroker_Staff.Entity = value
                If ((value Is Nothing) _
                            = False) Then
                    value.AP_mpdCalc_StaffBudgets.Add(Me)
                    Me._StaffId = value.StaffId
                Else
                    Me._StaffId = CType(Nothing, Integer)
                End If
                Me.SendPropertyChanged("AP_StaffBroker_Staff")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_Definition")>  _
Partial Public Class AP_mpdCalc_Definition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mpdDefId As Integer
	
	Private _TabModuleId As Integer
	
	Private _PortalId As Integer
	
	Private _ActiveFromYear As Short
	
	Private _AssessmentRate As Double
	
	Private _ShowComplience As Boolean
	
	Private _Complience As String
	
	Private _AP_mpd_Countries As EntityRef(Of AP_mpd_Country)
	
	Private _AP_mpdCalc_StaffBudgets As EntitySet(Of AP_mpdCalc_StaffBudget)
	
	Private _AP_StaffBroker_Settings As EntitySet(Of AP_StaffBroker_Setting)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdDefIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdDefIdChanged()
    End Sub
    Partial Private Sub OnTabModuleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTabModuleIdChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnActiveFromYearChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveFromYearChanged()
    End Sub
    Partial Private Sub OnAssessmentRateChanging(value As Double)
    End Sub
    Partial Private Sub OnAssessmentRateChanged()
    End Sub
    Partial Private Sub OnShowComplienceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowComplienceChanged()
    End Sub
    Partial Private Sub OnComplienceChanging(value As String)
    End Sub
    Partial Private Sub OnComplienceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_mpd_Countries = CType(Nothing, EntityRef(Of AP_mpd_Country))
		Me._AP_mpdCalc_StaffBudgets = New EntitySet(Of AP_mpdCalc_StaffBudget)(AddressOf Me.attach_AP_mpdCalc_StaffBudgets, AddressOf Me.detach_AP_mpdCalc_StaffBudgets)
		Me._AP_StaffBroker_Settings = New EntitySet(Of AP_StaffBroker_Setting)(AddressOf Me.attach_AP_StaffBroker_Settings, AddressOf Me.detach_AP_StaffBroker_Settings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdDefId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property mpdDefId() As Integer
		Get
			Return Me._mpdDefId
		End Get
		Set
			If ((Me._mpdDefId = value)  _
						= false) Then
				Me.OnmpdDefIdChanging(value)
				Me.SendPropertyChanging
				Me._mpdDefId = value
				Me.SendPropertyChanged("mpdDefId")
				Me.OnmpdDefIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabModuleId", DbType:="Int NOT NULL")>  _
	Public Property TabModuleId() As Integer
		Get
			Return Me._TabModuleId
		End Get
		Set
			If ((Me._TabModuleId = value)  _
						= false) Then
				Me.OnTabModuleIdChanging(value)
				Me.SendPropertyChanging
				Me._TabModuleId = value
				Me.SendPropertyChanged("TabModuleId")
				Me.OnTabModuleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActiveFromYear", DbType:="SmallInt NOT NULL")>  _
	Public Property ActiveFromYear() As Short
		Get
			Return Me._ActiveFromYear
		End Get
		Set
			If ((Me._ActiveFromYear = value)  _
						= false) Then
				Me.OnActiveFromYearChanging(value)
				Me.SendPropertyChanging
				Me._ActiveFromYear = value
				Me.SendPropertyChanged("ActiveFromYear")
				Me.OnActiveFromYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssessmentRate", DbType:="Float NOT NULL")>  _
	Public Property AssessmentRate() As Double
		Get
			Return Me._AssessmentRate
		End Get
		Set
			If ((Me._AssessmentRate = value)  _
						= false) Then
				Me.OnAssessmentRateChanging(value)
				Me.SendPropertyChanging
				Me._AssessmentRate = value
				Me.SendPropertyChanged("AssessmentRate")
				Me.OnAssessmentRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowComplience", DbType:="Bit NOT NULL")>  _
	Public Property ShowComplience() As Boolean
		Get
			Return Me._ShowComplience
		End Get
		Set
			If ((Me._ShowComplience = value)  _
						= false) Then
				Me.OnShowComplienceChanging(value)
				Me.SendPropertyChanging
				Me._ShowComplience = value
				Me.SendPropertyChanged("ShowComplience")
				Me.OnShowComplienceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complience", DbType:="NVarChar(MAX)")>  _
	Public Property Complience() As String
		Get
			Return Me._Complience
		End Get
		Set
			If (String.Equals(Me._Complience, value) = false) Then
				Me.OnComplienceChanging(value)
				Me.SendPropertyChanging
				Me._Complience = value
				Me.SendPropertyChanged("Complience")
				Me.OnComplienceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpd_Country", Storage:="_AP_mpd_Countries", ThisKey:="mpdDefId", OtherKey:="mpdDefId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property AP_mpd_Countries() As AP_mpd_Country
		Get
			Return Me._AP_mpd_Countries.Entity
		End Get
		Set
			Dim previousValue As AP_mpd_Country = Me._AP_mpd_Countries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_mpd_Countries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_mpd_Countries.Entity = Nothing
					previousValue.AP_mpdCalc_Definition = Nothing
				End If
				Me._AP_mpd_Countries.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.AP_mpdCalc_Definition = Me
				End If
				Me.SendPropertyChanged("AP_mpd_Countries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_StaffBudget", Storage:="_AP_mpdCalc_StaffBudgets", ThisKey:="mpdDefId", OtherKey:="DefinitionId")>  _
	Public Property AP_mpdCalc_StaffBudgets() As EntitySet(Of AP_mpdCalc_StaffBudget)
		Get
			Return Me._AP_mpdCalc_StaffBudgets
		End Get
		Set
			Me._AP_mpdCalc_StaffBudgets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_StaffBroker_Setting", Storage:="_AP_StaffBroker_Settings", ThisKey:="PortalId", OtherKey:="PortalId")>  _
	Public Property AP_StaffBroker_Settings() As EntitySet(Of AP_StaffBroker_Setting)
		Get
			Return Me._AP_StaffBroker_Settings
		End Get
		Set
			Me._AP_StaffBroker_Settings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
		Me.SendPropertyChanging
		entity.AP_mpdCalc_Definition = Me
	End Sub
	
	Private Sub detach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
		Me.SendPropertyChanging
		entity.AP_mpdCalc_Definition = Nothing
	End Sub
	
	Private Sub attach_AP_StaffBroker_Settings(ByVal entity As AP_StaffBroker_Setting)
		Me.SendPropertyChanging
		entity.AP_mpdCalc_Definition = Me
	End Sub
	
	Private Sub detach_AP_StaffBroker_Settings(ByVal entity As AP_StaffBroker_Setting)
		Me.SendPropertyChanging
		entity.AP_mpdCalc_Definition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_Settings")>  _
Partial Public Class AP_StaffBroker_Setting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SettingId As Integer
	
	Private _SettingName As String
	
	Private _SettingValue As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)
	
	Private _AP_mpd_Country As EntityRef(Of AP_mpd_Country)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSettingIdChanged()
    End Sub
    Partial Private Sub OnSettingNameChanging(value As String)
    End Sub
    Partial Private Sub OnSettingNameChanged()
    End Sub
    Partial Private Sub OnSettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
		Me._AP_mpd_Country = CType(Nothing, EntityRef(Of AP_mpd_Country))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SettingId() As Integer
		Get
			Return Me._SettingId
		End Get
		Set
			If ((Me._SettingId = value)  _
						= false) Then
				Me.OnSettingIdChanging(value)
				Me.SendPropertyChanging
				Me._SettingId = value
				Me.SendPropertyChanged("SettingId")
				Me.OnSettingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingName", DbType:="NVarChar(50)")>  _
	Public Property SettingName() As String
		Get
			Return Me._SettingName
		End Get
		Set
			If (String.Equals(Me._SettingName, value) = false) Then
				Me.OnSettingNameChanging(value)
				Me.SendPropertyChanging
				Me._SettingName = value
				Me.SendPropertyChanged("SettingName")
				Me.OnSettingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValue", DbType:="NVarChar(MAX)")>  _
	Public Property SettingValue() As String
		Get
			Return Me._SettingValue
		End Get
		Set
			If (String.Equals(Me._SettingValue, value) = false) Then
				Me.OnSettingValueChanging(value)
				Me.SendPropertyChanging
				Me._SettingValue = value
				Me.SendPropertyChanged("SettingValue")
				Me.OnSettingValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				If (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue OrElse Me._AP_mpd_Country.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_StaffBroker_Setting", Storage:="_AP_mpdCalc_Definition", ThisKey:="PortalId", OtherKey:="PortalId", IsForeignKey:=true)>  _
	Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
		Get
			Return Me._AP_mpdCalc_Definition.Entity
		End Get
		Set
			Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_mpdCalc_Definition.Entity = Nothing
					previousValue.AP_StaffBroker_Settings.Remove(Me)
				End If
				Me._AP_mpdCalc_Definition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_Settings.Add(Me)
					Me._PortalId = value.PortalId
				Else
					Me._PortalId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("AP_mpdCalc_Definition")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_AP_StaffBroker_Setting", Storage:="_AP_mpd_Country", ThisKey:="PortalId", OtherKey:="portalId", IsForeignKey:=true)>  _
	Public Property AP_mpd_Country() As AP_mpd_Country
		Get
			Return Me._AP_mpd_Country.Entity
		End Get
		Set
			Dim previousValue As AP_mpd_Country = Me._AP_mpd_Country.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_mpd_Country.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_mpd_Country.Entity = Nothing
					previousValue.AP_StaffBroker_Settings.Remove(Me)
				End If
				Me._AP_mpd_Country.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_Settings.Add(Me)
					Me._PortalId = value.portalId
				Else
					Me._PortalId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("AP_mpd_Country")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
